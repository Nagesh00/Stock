version: '3.8'

services:
  # Apache Kafka for Message Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: ai-trading-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: ai-trading-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TimescaleDB for Time-Series Data
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: ai-trading-timescaledb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: trading_password
      TIMESCALEDB_TELEMETRY: 'off'
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
      - ./infrastructure/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Session Storage
  redis:
    image: redis:7.2-alpine
    container_name: ai-trading-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: ai-trading-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: ai-trading-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: 'false'
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

  # Kafka UI for Development
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ai-trading-kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka

  # Data Ingestion Service
  data-ingestion:
    build:
      context: .
      dockerfile: services/data-ingestion/Dockerfile
    container_name: ai-trading-data-ingestion
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      DATABASE_URL: postgresql://trading_user:trading_password@timescaledb:5432/trading_db
      REDIS_URL: redis://redis:6379
    depends_on:
      kafka:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Feature Engineering Service
  feature-engineering:
    build:
      context: .
      dockerfile: services/feature-engineering/Dockerfile
    container_name: ai-trading-feature-engineering
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      DATABASE_URL: postgresql://trading_user:trading_password@timescaledb:5432/trading_db
      REDIS_URL: redis://redis:6379
    depends_on:
      kafka:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    restart: unless-stopped

  # Signal Generation Service
  signal-generation:
    build:
      context: .
      dockerfile: services/signal-generation/Dockerfile
    container_name: ai-trading-signal-generation
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      DATABASE_URL: postgresql://trading_user:trading_password@timescaledb:5432/trading_db
      MODEL_PATH: /app/models
    volumes:
      - ./models:/app/models
    depends_on:
      kafka:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    restart: unless-stopped

  # Risk Management Service
  risk-management:
    build:
      context: .
      dockerfile: services/risk-management/Dockerfile
    container_name: ai-trading-risk-management
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      DATABASE_URL: postgresql://trading_user:trading_password@timescaledb:5432/trading_db
      MAX_PORTFOLIO_RISK: 0.02
      MAX_POSITION_SIZE: 0.1
    depends_on:
      kafka:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    restart: unless-stopped

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  timescaledb-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  default:
    name: ai-trading-network
